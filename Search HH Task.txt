add this script at the bottom of the html page before </body> tag:
<script>
  class PageSearch {
    constructor() {
        this.searchInput = document.getElementById('searchInput');
        this.clearBtn = document.getElementById('clearBtn');
        this.searchResults = document.getElementById('searchResults');
        this.resultsCount = document.getElementById('resultsCount');
        this.currentResult = document.getElementById('currentResult');
        this.prevBtn = document.getElementById('prevBtn');
        this.nextBtn = document.getElementById('nextBtn');
        
        this.matches = [];
        this.currentIndex = 0;
        this.searchTerm = '';
        
        this.init();
    }

    init() {
        // Event listeners
        this.searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));
        this.searchInput.addEventListener('keydown', (e) => this.handleKeydown(e));
        this.clearBtn.addEventListener('click', () => this.clearSearch());
        this.prevBtn.addEventListener('click', () => this.navigateResults(-1));
        this.nextBtn.addEventListener('click', () => this.navigateResults(1));

        // Global keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.clearSearch();
            } else if (e.ctrlKey && e.key === 'f') {
                e.preventDefault();
                this.searchInput.focus();
            }
        });
    }

    handleSearch(query) {
        this.searchTerm = query.trim();
        
        // Show/hide clear button
        this.clearBtn.style.display = this.searchTerm ? 'flex' : 'none';
        
        if (this.searchTerm.length === 0) {
            this.clearHighlights();
            this.hideResults();
            return;
        }

        if (this.searchTerm.length < 2) {
            return; // Wait for at least 2 characters
        }

        this.performSearch();
    }

    handleKeydown(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            if (this.matches.length > 0) {
                this.navigateResults(1);
            }
        }
    }

    performSearch() {
        this.clearHighlights();
        this.matches = [];
        
        const searchRegex = new RegExp(this.escapeRegex(this.searchTerm), 'gi');
        const walker = document.createTreeWalker(
            document.querySelector('.content-wrapper'),
            NodeFilter.SHOW_TEXT,
            {
                acceptNode: (node) => {
                    // Skip script, style, and search widget elements
                    const parent = node.parentNode;
                    if (parent.closest('.search-widget') || 
                        parent.tagName === 'SCRIPT' || 
                        parent.tagName === 'STYLE') {
                        return NodeFilter.FILTER_REJECT;
                    }
                    return node.textContent.trim().length > 0 ? 
                           NodeFilter.FILTER_ACCEPT : 
                           NodeFilter.FILTER_REJECT;
                }
            }
        );

        const textNodes = [];
        let node;
        while (node = walker.nextNode()) {
            textNodes.push(node);
        }

        textNodes.forEach(textNode => {
            const text = textNode.textContent;
            const matches = [...text.matchAll(searchRegex)];
            
            if (matches.length > 0) {
                this.highlightTextNode(textNode, matches);
            }
        });

        this.updateResults();
    }

    highlightTextNode(textNode, matches) {
        const text = textNode.textContent;
        const parent = textNode.parentNode;
        const fragment = document.createDocumentFragment();
        
        let lastIndex = 0;
        
        matches.forEach((match, index) => {
            // Add text before match
            if (match.index > lastIndex) {
                fragment.appendChild(
                    document.createTextNode(text.slice(lastIndex, match.index))
                );
            }
            
            // Create highlight element
            const highlight = document.createElement('span');
            highlight.className = 'search-highlight';
            highlight.textContent = match[0];
            highlight.setAttribute('data-search-index', this.matches.length);
            
            fragment.appendChild(highlight);
            this.matches.push(highlight);
            
            lastIndex = match.index + match[0].length;
        });
        
        // Add remaining text
        if (lastIndex < text.length) {
            fragment.appendChild(
                document.createTextNode(text.slice(lastIndex))
            );
        }
        
        parent.replaceChild(fragment, textNode);
    }

    updateResults() {
        if (this.matches.length === 0) {
            this.hideResults();
            return;
        }

        this.currentIndex = 0;
        this.showResults();
        this.updateCurrentHighlight();
        this.scrollToCurrentMatch();
    }

    showResults() {
        this.searchResults.style.display = 'flex';
        this.resultsCount.textContent = `${this.matches.length} result${this.matches.length !== 1 ? 's' : ''}`;
        this.updateNavigationControls();
    }

    hideResults() {
        this.searchResults.style.display = 'none';
    }

    updateNavigationControls() {
        if (this.matches.length === 0) {
            this.prevBtn.disabled = true;
            this.nextBtn.disabled = true;
            this.currentResult.textContent = '0/0';
            return;
        }

        this.prevBtn.disabled = this.matches.length <= 1;
        this.nextBtn.disabled = this.matches.length <= 1;
        this.currentResult.textContent = `${this.currentIndex + 1}/${this.matches.length}`;
    }

    navigateResults(direction) {
        if (this.matches.length === 0) return;
        
        this.currentIndex = (this.currentIndex + direction + this.matches.length) % this.matches.length;
        this.updateCurrentHighlight();
        this.scrollToCurrentMatch();
        this.updateNavigationControls();
    }

    updateCurrentHighlight() {
        this.matches.forEach((match, index) => {
            match.classList.toggle('current', index === this.currentIndex);
        });
    }

    scrollToCurrentMatch() {
        if (this.matches.length === 0) return;
        
        const currentMatch = this.matches[this.currentIndex];
        const rect = currentMatch.getBoundingClientRect();
        const isVisible = rect.top >= 0 && rect.bottom <= window.innerHeight;
        
        if (!isVisible) {
            currentMatch.scrollIntoView({
                behavior: 'smooth',
                block: 'center',
                inline: 'nearest'
            });
        }
    }

    clearHighlights() {
        const highlights = document.querySelectorAll('.search-highlight');
        highlights.forEach(highlight => {
            const parent = highlight.parentNode;
            parent.replaceChild(document.createTextNode(highlight.textContent), highlight);
            parent.normalize(); // Merge adjacent text nodes
        });
        this.matches = [];
    }

    clearSearch() {
        this.searchInput.value = '';
        this.searchTerm = '';
        this.clearBtn.style.display = 'none';
        this.clearHighlights();
        this.hideResults();
        this.searchInput.focus();
    }

    escapeRegex(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
}

// Initialize search functionality when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new PageSearch();
});

// Add some visual feedback for better UX
document.addEventListener('DOMContentLoaded', () => {
    // Add focus ring animation
    const searchInput = document.getElementById('searchInput');
    
    searchInput.addEventListener('focus', () => {
        searchInput.closest('.search-input-wrapper').style.transform = 'scale(1.02)';
    });
    
    searchInput.addEventListener('blur', () => {
        searchInput.closest('.search-input-wrapper').style.transform = 'scale(1)';
    });
    
    // Add typing animation to placeholder
    const placeholders = [
        'Search this page...',
        'Find any text...',
        'Try "search" or "technology"...',
        'Type to find content...'
    ];
    
    let placeholderIndex = 0;
    
    setInterval(() => {
        if (!searchInput.value && document.activeElement !== searchInput) {
            placeholderIndex = (placeholderIndex + 1) % placeholders.length;
            searchInput.placeholder = placeholders[placeholderIndex];
        }
    }, 3000);
});
</script>
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1-replace this:
<div class="search" id="searchForm">
<form class="search-form" onsubmit="return false;">
<img alt="Horsham Handyman - your local handyman in Horsham for big and small jobs in the home and garden. Covering Horsham, Southwater and Broadbridge Heath" src="https://www.horshamhandyman.com/_a_images-horsham-handyman/horsham-handyman-search-5.webp" width="22" height="22">&nbsp;
<input type="text" autocomplete="on" placeholder="Search This Page" name="Search This Page" id="searchText">
<ul id="searchResults"></ul>
</form>


<button id="responsiveButton" class="button primary-button">Search</button>
</div>

<div>


</div>



with this:
<div class="search-widget search sticky" id="searchWidget">
  <div class="search-container">
      <div class="search-input-wrapper search-form">
          <img alt="Horsham Handyman - your local handyman in Horsham for big and small jobs in the home and garden. Covering Horsham, Southwater and Broadbridge Heath" src="https://www.horshamhandyman.com/_a_images-horsham-handyman/horsham-handyman-search-5.webp" width="22" height="22">&nbsp;
          <input 
              type="text" 
              id="searchInput" 
              placeholder="Search this page..." 
              autocomplete="off">
          <div class="clear-btn" id="clearBtn" style="display: none;">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
          </div>
      </div>
      
      <div class="search-results" id="searchResults" style="display: none;">
          <span class="results-count" id="resultsCount">0 results</span>
          <div class="navigation-controls">
              <div class="nav-btn" id="prevBtn" disabled>
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <polyline points="15,18 9,12 15,6"></polyline>
                  </svg>
                </div>
              <span class="current-result" id="currentResult">0/0</span>
              <div class="nav-btn" id="nextBtn" disabled>
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <polyline points="9,18 15,12 9,6"></polyline>
                  </svg>
                </div>
          </div>
      </div>
  </div>
</div>


2-replace this:
<div class="page-main" id="text">


with this:
<div class="page-main content-wrapper" id="text">

//////////////////////////////////////////////////////////////////////////////////////////

3- add this to all css files:
.search-widget {
  background-color: #fff;
  padding: 0;
}
.clear-btn {
  position: absolute;
  right: 8px;
  top: 4px;
  width: 32px;
  height: 32px;
  border: none;
  background: rgba(239, 68, 68, 0.1);
  color: #ef4444;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  opacity: 0;
  animation: fadeIn 0.3s ease forwards;
}

.clear-btn:hover {
  background: rgba(239, 68, 68, 0.2);
  transform: scale(1.05);
}

.clear-btn svg {
  width: 16px;
  height: 16px;
}

.search-results {
  margin-top: 16px;
  padding-top: 16px;
  border-top: 1px solid rgba(0, 0, 0, 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 2rem;
  opacity: 0;
  animation: slideUp 0.4s ease forwards;
}

.results-count {
  font-size: 20px;
  color: #6b7280;
  font-weight: 500;
}

.navigation-controls {
  display: flex;
  align-items: center;
  gap: 8px;
}

.nav-btn {
  width: 32px;
  height: 32px;
  border: none;
  background: rgba(59, 130, 246, 0.1);
  color: #3b82f6;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.nav-btn:hover:not(:disabled) {
  background: rgba(59, 130, 246, 0.2);
  transform: scale(1.05);
}

.nav-btn:disabled {
  opacity: 0.4;
  cursor: not-allowed;
}

.nav-btn svg {
  width: 32px;
  height: 32px;
}

.current-result {
  font-size: 20px;
  color: #6b7280;
  font-weight: 500;
  min-width: 40px;
  text-align: center;
}
/* Search Highlight Styles */
.search-highlight {
  background: linear-gradient(120deg, #fef3c7 0%, #fde68a 100%);
  color: #92400e;
  padding: 2px 4px;
  border-radius: 4px;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 2px 4px rgba(251, 191, 36, 0.2);
}

.search-highlight.current {
  background: linear-gradient(120deg, #f97316 0%, #ea580c 100%);
  color: white;
  box-shadow: 0 4px 8px rgba(249, 115, 22, 0.3);
  transform: scale(1.05);
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes pulse {
  0%,
  100% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.05);
  }
}

//////////////////////////////////////////////////////////////////////////////////////////
3- in the first and second css files, replace this:
.top-nav {
    position: sticky;
    background-color: #fff;
    display: flex;
    flex-direction: row-reverse;
    align-items: center;
    justify-content: space-between;
    height: 50px;
    top: 0;
    z-index: 999;
    margin-bottom: 10px;
    width: 94%;
}

with this: 
.top-nav {
    position: sticky;
    background-color: #fff;
    display: flex;
    flex-direction: row-reverse;
    justify-content: space-between;
    align-items: flex-start;
    min-height: 50px;
    height: auto;
    top: 0;
    padding-top: 4px;
    z-index: 999;
    margin-bottom: 10px;
    width: 94%;
}

4-in the 3,4,5,6 css files, replace this:
.top-nav {
    position: sticky;
    background-color: #fff;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    height: 50px;
    top: 0;
    z-index: 999;
    margin-bottom: 10px;
    width: 82%;
}

with this:
.top-nav {
    position: sticky;
    background-color: #fff;
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    justify-content: center;
    min-height: 50px;
    height: auto;
    top: 0;
    padding-top: 4px;
    z-index: 999;
    margin-bottom: 10px;
    width: 82%;
}

5-in the first, and second css files, replace this:
.menu-button-container {
    display: none;
    height: 100%;
    width: 30px;
    cursor: pointer;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

with this:
.menu-button-container {
    display: none;
    height: 100%;
    width: 30px;
    cursor: pointer;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding-top: 19px;
}

6-in the 3,4,5,6 css files, replace this:
.menu {
    font-size: 115%;
    font-weight: 600;
    display: flex;
    flex-direction: row;
    list-style-type: none;
    margin: 0 1rem 0 0;
    padding: 0;
}

with this:
.menu {
    font-size: 115%;
    font-weight: 600;
    display: flex;
    flex-direction: row;
    list-style-type: none;
    margin: 0 0.5rem 0 0;
    padding: 0;
    padding-top: 4px;
}
